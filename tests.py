import unittest
from HexagonalFillomino import HexagonalFillomino
from CUI import *


class TestHexagonalFillomino(unittest.TestCase):

    def setUp(self):
        self.solver = HexagonalFillomino()
        import sys
        sys.setrecursionlimit(1000000)

    def get_unique_solutions(self, board):
        results = self.solver.find_solves(board)
        results_unic = []

        for result in results:
            if result not in results_unic:
                results_unic.append(result)

        return results_unic

    def get_str_solutions(self, solutions):
        strokes = []
        for solution in solutions:
            strokes.append(str(solution))
        return strokes

    def draw_solutions(self, solutions):
        for solution in solutions:
            draw_simple_hex_board(solution)
            print()

    def get_unique_solutions_with_solver(self, solver, board):
        results = solver.find_solves(board)
        solutions = []

        for result in results:
            if result not in solutions:
                solutions.append(result)

        return solutions


    # def test_7sells_board(self):
    #     board = {(0, 0): 3, (1, 0): 2, (0, 1): 0, (-1, 1): 0, (-1, 0): 0,
    #              (0, -1): 0, (1, -1): 0}
    #
    #     expected_solutions = [
    #         "{(0, 0): 3, (1, 0): 2, (0, 1): 2, (-1, 1): 1, (-1, 0): 3, (0, -1): 1, (1, -1): 3}",
    #         "{(0, 0): 3, (1, 0): 2, (0, 1): 2, (-1, 1): 3, (-1, 0): 2, (0, -1): 2, (1, -1): 3}",
    #         "{(0, 0): 3, (1, 0): 2, (0, 1): 2, (-1, 1): 1, (-1, 0): 3, (0, -1): 3, (1, -1): 1}",
    #         "{(0, 0): 3, (1, 0): 2, (0, 1): 3, (-1, 1): 2, (-1, 0): 2, (0, -1): 3, (1, -1): 2}",
    #         "{(0, 0): 3, (1, 0): 2, (0, 1): 1, (-1, 1): 3, (-1, 0): 1, (0, -1): 3, (1, -1): 2}",
    #         "{(0, 0): 3, (1, 0): 2, (0, 1): 2, (-1, 1): 3, (-1, 0): 1, (0, -1): 3, (1, -1): 1}",
    #         "{(0, 0): 3, (1, 0): 2, (0, 1): 3, (-1, 1): 1, (-1, 0): 3, (0, -1): 1, (1, -1): 2}",
    #         "{(0, 0): 3, (1, 0): 2, (0, 1): 1, (-1, 1): 3, (-1, 0): 3, (0, -1): 1, (1, -1): 2}"
    #     ]
    #
    #     actual_solutions = self.get_unique_solutions(board)
    #     actual_str_solutions = self.get_str_solutions(actual_solutions)
    #     print("Решения:")
    #     self.draw_solutions(actual_solutions)
    #
    #     print(f"Найдено решений: {len(actual_str_solutions)}")
    #     print("Ожидалось решений: 8")
    #
    #     self.assertEqual(len(actual_str_solutions), len(expected_solutions))
    #
    #     for expected in expected_solutions:
    #         self.assertIn(expected, actual_str_solutions)
    #
    #     for actual in actual_str_solutions:
    #         self.assertIn(actual, expected_solutions)
    #
    # def test_19sells_simple_board(self):
    #     board = {
    #         (0, 0): 1,
    #
    #         (1, 0): 3, (1, -1): 0, (0, -1): 0,
    #         (-1, 0): 4, (-1, 1): 3, (0, 1): 2,
    #
    #         (2, 0): 3, (2, -1): 0, (2, -2): 0,
    #         (1, -2): 0, (0, -2): 0, (-1, -1): 4,
    #         (-2, 0): 4, (-2, 1): 4, (-2, 2): 3,
    #         (-1, 2): 3, (0, 2): 2, (1, 1): 3
    #     }
    #
    #     expected_solutions = [
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 6, (0, -1): 6, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 6, (2, -2): 6, (1, -2): 6, (0, -2): 6, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 5, (0, -1): 5, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 5, (2, -2): 5, (1, -2): 5, (0, -2): 1, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 5, (0, -1): 5, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 5, (2, -2): 5, (1, -2): 1, (0, -2): 5, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 5, (0, -1): 5, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 1, (2, -2): 5, (1, -2): 5, (0, -2): 5, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 5, (0, -1): 5, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 5, (2, -2): 1, (1, -2): 5, (0, -2): 5, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 4, (0, -1): 2, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 4, (2, -2): 4, (1, -2): 4, (0, -2): 2, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 2, (0, -1): 3, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 1, (2, -2): 2, (1, -2): 3, (0, -2): 3, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 2, (0, -1): 3, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 2, (2, -2): 3, (1, -2): 3, (0, -2): 1, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 2, (0, -1): 3, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 2, (2, -2): 1, (1, -2): 3, (0, -2): 3, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #         "{(0, 0): 1, (1, 0): 3, (1, -1): 2, (0, -1): 2, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 1, (2, -2): 3, (1, -2): 3, (0, -2): 3, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
    #     ]
    #
    #     actual_solutions = self.get_unique_str_solutions(board)
    #
    #     print(f"Найдено решений: {len(actual_solutions)}")
    #     print("Ожидалось решений: 10")
    #
    #     self.assertEqual(len(actual_solutions), len(expected_solutions))
    #
    #     for expected in expected_solutions:
    #         self.assertIn(expected, actual_solutions)
    #
    #     for actual in actual_solutions:
    #         self.assertIn(actual, expected_solutions)
    #
    #
    # def test_impossible_configuration(self):
    #     """Тест с заведомо нерешаемой конфигурацией"""
    #     #self.assertEqual(count, 0)



    def test_hexagonal_boards(self):
        test_cases = [
            {
                'name': '7-ячеечная доска',
                'board': {(0, 0): 3, (1, 0): 2, (0, 1): 0, (-1, 1): 0,
                          (-1, 0): 0, (0, -1): 0, (1, -1): 0},
                'expected_solutions': [
                    "{(0, 0): 3, (1, 0): 2, (0, 1): 2, (-1, 1): 1, (-1, 0): 3, (0, -1): 1, (1, -1): 3}",
                    "{(0, 0): 3, (1, 0): 2, (0, 1): 2, (-1, 1): 3, (-1, 0): 2, (0, -1): 2, (1, -1): 3}",
                    "{(0, 0): 3, (1, 0): 2, (0, 1): 2, (-1, 1): 1, (-1, 0): 3, (0, -1): 3, (1, -1): 1}",
                    "{(0, 0): 3, (1, 0): 2, (0, 1): 3, (-1, 1): 2, (-1, 0): 2, (0, -1): 3, (1, -1): 2}",
                    "{(0, 0): 3, (1, 0): 2, (0, 1): 1, (-1, 1): 3, (-1, 0): 1, (0, -1): 3, (1, -1): 2}",
                    "{(0, 0): 3, (1, 0): 2, (0, 1): 2, (-1, 1): 3, (-1, 0): 1, (0, -1): 3, (1, -1): 1}",
                    "{(0, 0): 3, (1, 0): 2, (0, 1): 3, (-1, 1): 1, (-1, 0): 3, (0, -1): 1, (1, -1): 2}",
                    "{(0, 0): 3, (1, 0): 2, (0, 1): 1, (-1, 1): 3, (-1, 0): 3, (0, -1): 1, (1, -1): 2}"
                ]
            },
            {
                'name': '19-ячеечная простая доска',
                'board': {
                    (0, 0): 1,

                    (1, 0): 3, (1, -1): 0, (0, -1): 0,
                    (-1, 0): 4, (-1, 1): 3, (0, 1): 2,

                    (2, 0): 3, (2, -1): 0, (2, -2): 0,
                    (1, -2): 0, (0, -2): 0, (-1, -1): 4,
                    (-2, 0): 4, (-2, 1): 4, (-2, 2): 3,
                    (-1, 2): 3, (0, 2): 2, (1, 1): 3
                },
                'expected_solutions': [
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 6, (0, -1): 6, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 6, (2, -2): 6, (1, -2): 6, (0, -2): 6, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 5, (0, -1): 5, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 5, (2, -2): 5, (1, -2): 5, (0, -2): 1, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 5, (0, -1): 5, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 5, (2, -2): 5, (1, -2): 1, (0, -2): 5, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 5, (0, -1): 5, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 1, (2, -2): 5, (1, -2): 5, (0, -2): 5, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 5, (0, -1): 5, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 5, (2, -2): 1, (1, -2): 5, (0, -2): 5, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 4, (0, -1): 2, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 4, (2, -2): 4, (1, -2): 4, (0, -2): 2, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 2, (0, -1): 3, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 1, (2, -2): 2, (1, -2): 3, (0, -2): 3, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 2, (0, -1): 3, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 2, (2, -2): 3, (1, -2): 3, (0, -2): 1, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 2, (0, -1): 3, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 2, (2, -2): 1, (1, -2): 3, (0, -2): 3, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                    "{(0, 0): 1, (1, 0): 3, (1, -1): 2, (0, -1): 2, (-1, 0): 4, (-1, 1): 3, (0, 1): 2, (2, 0): 3, (2, -1): 1, (2, -2): 3, (1, -2): 3, (0, -2): 3, (-1, -1): 4, (-2, 0): 4, (-2, 1): 4, (-2, 2): 3, (-1, 2): 3, (0, 2): 2, (1, 1): 3}",
                ]
            }
        ]

        for test_case in test_cases:
            with self.subTest(test_case['name']):
                print(f"\n{'=' * 60}")
                print(f"ТЕСТ: {test_case['name']}")
                print('=' * 60)

                print("Доска:")
                draw_simple_hex_board(test_case['board'])
                print()

                solver = HexagonalFillomino()
                actual_solutions = self.get_unique_solutions_with_solver(
                    solver, test_case['board'])
                actual_str_solutions = self.get_str_solutions(actual_solutions)

                print("Решения:")
                self.draw_solutions(actual_solutions)

                print(f"Найдено решений: {len(actual_solutions)}")
                print(f"Ожидалось решений: {len(test_case['expected_solutions'])}")


                self.assertEqual(len(actual_solutions),
                                 len(test_case['expected_solutions']),
                                 f"Количество решений не совпадает для {test_case['name']}")

                missing_solutions = []
                for expected in test_case['expected_solutions']:
                    if expected not in actual_solutions:
                        missing_solutions.append(expected)

                extra_solutions = []
                for actual in actual_solutions:
                    if actual not in test_case['expected_solutions']:
                        extra_solutions.append(actual)

                for expected in test_case['expected_solutions']:
                    self.assertIn(expected, actual_str_solutions,
                                  f"Ожидаемое решение не найдено в {test_case['name']}")

                for actual in actual_str_solutions:
                    self.assertIn(actual, test_case['expected_solutions'],
                                  f"Найдено лишнее решение в {test_case['name']}")

                print(f"✓ {test_case['name']} пройден успешно!")